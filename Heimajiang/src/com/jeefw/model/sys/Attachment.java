package com.jeefw.model.sys;import com.google.common.base.Objects;import com.jeefw.model.sys.param.AttachmentParameter;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.Id;import javax.persistence.Table;import org.codehaus.jackson.annotate.JsonIgnoreProperties;import org.hibernate.annotations.Cache;import org.hibernate.annotations.CacheConcurrencyStrategy;@Entity@Table(name="attachment")@Cache(region="all", usage=CacheConcurrencyStrategy.READ_WRITE)@JsonIgnoreProperties({"maxResults", "firstResult", "topCount", "sortColumns", "cmd", "queryDynamicConditions", "sortedConditions", "dynamicProperties", "success", "message", "sortColumnsString", "flag"})public class Attachment  extends AttachmentParameter{  private static final long serialVersionUID = 7296680169194828397L;  @Id  @GeneratedValue  @Column(name="id")  private Long id;  @Column(name="file_name", length=100)  private String fileName;  @Column(name="file_path", length=1000)  private String filePath;  @Column(name="type")  private Short type;  @Column(name="type_id")  private Long typeId;    public Long getId()  {    return this.id;  }    public void setId(Long id)  {    this.id = id;  }    public String getFileName()  {    return this.fileName;  }    public void setFileName(String fileName)  {    this.fileName = fileName;  }    public String getFilePath()  {    return this.filePath;  }    public void setFilePath(String filePath)  {    this.filePath = filePath;  }    public Short getType()  {    return this.type;  }    public void setType(Short type)  {    this.type = type;  }    public Long getTypeId()  {    return this.typeId;  }    public void setTypeId(Long typeId)  {    this.typeId = typeId;  }    public boolean equals(Object obj)  {    if (obj == null) {      return false;    }    if (getClass() != obj.getClass()) {      return false;    }    Attachment other = (Attachment)obj;    return (Objects.equal(this.id, other.id)) && (Objects.equal(this.fileName, other.fileName)) && (Objects.equal(this.filePath, other.filePath)) && (Objects.equal(this.type, other.type)) &&       (Objects.equal(this.typeId, other.typeId));  }    public int hashCode()  {    return Objects.hashCode(new Object[] { this.id, this.fileName, this.filePath, this.type, this.typeId });  }}